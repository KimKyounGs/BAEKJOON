/*
아이디어 :



*/
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <cmath>
#include <cstring>
#include <deque>
#include <map>
#define INF 1e9
#define endl '\n'

using namespace std;

int N, M, white = 1, blue = 1, ally = 0, enemy = 0;
char graph[101][101];

int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, 1, -1};

bool DFS (int x, int y) {

    queue <pair <int, int>> q;
    q.push({x,y});
    graph[x][y] = '0';
    while (!q.empty()) {
        x = q.front().first;
        y = q.front().second;
        q.pop();
        for (int i = 0; i < 4; i ++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if ( nx < 0 || nx > M || ny < 0 || ny > N) {
                continue;
            }
            if (graph[nx][ny] == 'W') {
                white ++;
                q.push({nx,ny});
                graph[nx][ny] = '0';
            }
        }
    }
    return true;
}

bool BFS (int x, int y) {

    queue <pair <int, int>> q;
    q.push({x,y});
    graph[x][y] = '0';
    while (!q.empty()) {
        x = q.front().first;
        y = q.front().second;
        q.pop();
        for (int i = 0; i < 4; i ++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if ( nx < 0 || nx > M || ny < 0 || ny > N) {
                continue;
            }
            if (graph[nx][ny] == 'B') {
                blue ++;
                q.push({nx,ny});
                graph[nx][ny] = '0';
            }
        }
    }
    return true;
}

int main() {
    cin >> N >> M;
    for (int i = 0; i < M; i ++) {
        for (int j = 0; j < N; j ++) {
            cin >> graph[i][j];
        }
    }

    for (int i = 0; i < M; i ++) {
        for (int j = 0; j < N; j ++) {
            if (graph[i][j] == 'W') {
                if (BFS(i,j)) {
                    ally += pow(white,2);
                    white  = 1;
                }
            }
            else if (graph[i][j] == 'B') {
                if (BFS(i,j)) {
                    enemy += pow(blue,2);
                    blue  = 1;
                }
            }
        }
    }

    cout << ally << ' ' << enemy << endl;
    return 0;
}