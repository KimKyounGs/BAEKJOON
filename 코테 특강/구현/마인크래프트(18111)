/*
아이디어 : 

#18111 : Mincraft

최우선으로 생각해야 하는 것은 시간이다. 
같은 높이로 맞추는 방법은 2가지이다.

하나의 높이를 기준으로 2가지 일을 한다.

1. 현재 기준의 높이보다 높은 경우
2. 현재 기준의 높이보다 작은 경우

*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

int N, M, B;
int graph[501][501];
vector<int> v;

int main() {
    cin >> N >> M >> B;

    for (int i = 0; i < N; i ++)  {
        for (int j = 0; j < M; j ++) {
            cin >> graph[i][j];
            v.push_back(graph[i][j]);
        }
    }
    

    int minTime = 1e9;
    int maxHeight = 0;
    
    for (int cnt = 0; cnt <= 256; cnt ++) {
        int time = 0;
        int block = B;
        bool check = true;
        for (int i = 0; i < N; i ++)  {
            for (int j = 0; j < M; j ++) {
                // 1. 현재 기준의 높이보다 높은 경우
                if (cnt > graph[i][j]) {
                    time += (cnt - graph[i][j]);
                    block -= cnt - graph[i][j];
                }

                // 2. 현재 기준의 높이보다 작은 경우
                else if (cnt < graph[i][j]) {
                    time += (graph[i][j] - cnt)*2;
                    block += graph[i][j] - cnt;
                }
            }
        }


        // 블럭의 개수가 필요한 정도보다 적다면 아웃.
        if (block < 0) check = false;

        // Debug
        //cout << cnt << ' ' << check << ' ' << time << '\n';

        if (check) {
            if (time < minTime) {
                minTime = time;
                maxHeight = cnt;
            }
            
            if (time == minTime) {
                if (maxHeight < cnt) {
                    maxHeight = cnt;
                }
            }
        }
    }

    cout << minTime << ' ' << maxHeight << '\n';
    
    return 0;
}