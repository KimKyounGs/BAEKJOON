/* 
# 아이디어
가는 방법은 두 가지가 있다. 
1. 그램없이 가는 방법.
2. 그램을 들고 가는 방법.

첫번째 방법또한 두 가지로 나뉜다.
1-1. 그램을 들고갈 수 있지만 안들고 가는 방법. (안들고 가는 방법이 더 빠른 경우)
1-2. 그램을 들고가지는 못하지만 도착할 수는 있음.

두번째 방법또한 두 가지로 나뉜다.
2-1. 그램을 들고 벽을 뚫고 가는 방법이 더 빠른 경우.
2-2. 그램없이는 도착할 수 없음.

위에 4가지 방법이 안되면 Fail을 출력한다. (그램없이는 못가는데 그램또한 구할 수 없는 경우)

다 풀고 나서 이렇게 정리하면 쉬운데, 막상 문제 풀 때는 가는 방법 두 가지 말고는 떠올르지 못했다. 섬세함이 부족한 것이였다.

*/
#include <bits/stdc++.h>

using namespace std;

int N, M, T;
int graph[102][102];
bool visited[102][102];
bool Gram;

int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, 1, -1};

int GramLocation_x;
int GramLocation_y;

void BFS(int x, int y, bool Gram) {
    queue<pair <int, int>> q;
    q.push({x,y});
    visited[x][y] = true; 
    while(!q.empty()) {
        int x = q.front().first;
        int y = q.front().second;
        q.pop();
        for(int i = 0; i < 4; i ++) {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if (nx < 1 || nx > N || ny < 1 || ny > M || visited[nx][ny]) {
                continue;
            }
            
            // 그램이 있는 경우
            if (Gram) {
                // graph[nx][ny] > 0 처음에 이렇게만 했음. 많이 틀렸어..
                if (graph[nx][ny] == -1 || graph[nx][ny] >= 0) {
                    graph[nx][ny] = graph[x][y] + 1;
                    q.push({nx,ny});
                    visited[nx][ny] = true;
                }
            }
                
            // 그램이 없는 경우
            else {
                // 그램있는 자리에 도착했을 때.
                if (graph[nx][ny] == -2) {
                    graph[nx][ny] = graph[x][y] + 1;
                    GramLocation_x = nx;
                    GramLocation_y = ny;
                    q.push({nx,ny});
                    visited[nx][ny] = true;
                }
                
                else if (graph[nx][ny] == 0) {
                    graph[nx][ny] = graph[x][y] + 1;
                    q.push({nx,ny});
                    visited[nx][ny] = true;
                }
            }
        }
    }
}

int main() {
    cin >> N >> M >> T;
    for (int i = 1; i <= N; i ++) {
        for (int j = 1; j <= M; j ++) {
            cin >> graph[i][j];
            if (graph[i][j] == 1) {
                graph[i][j] = -1;
            }
            if (graph[i][j] == 2) {
                graph[i][j] = -2;
            }
        }
    }

    BFS(1,1,false);
    int Time = graph[N][M];
    /*
    cout << "그램 얻기전" << '\n';
    for (int i = 1; i <= N; i ++) {
        for (int j = 1; j <= M; j ++) {
            cout << graph[i][j] << ' ';
        }
        cout << '\n';
    }
    */
    memset(visited, 0 , sizeof(visited));
    BFS(GramLocation_x, GramLocation_y, true);

    /*
    cout << "그램 얻은후" << '\n';
    for (int i = 1; i <= N; i ++) {
        for (int j = 1; j <= M; j ++) {
            cout << graph[i][j] << ' ';
        }
        cout << '\n';
    }
    */


    // 처음에 도착하지 못하면 Time이 0이 나오기 무조건 다음 graph[N][M]보다 작다. 그래서 이 경우를 체크해줘야 한다. (Time == 0)
    
    if (graph[N][M] < Time || Time == 0) {
        Time = graph[N][M];
    }
    
    if (Time <= T && Time != 0) {
        cout << Time << '\n';
    }
    else {
        cout << "Fail" << '\n';
    }
}