/*
아이디어 :

https://transferhwang.tistory.com/565

flag라는 변수명이 더 좋은 것 같다.

*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <cmath>
#include <cstring>

using namespace std;

int N;
char graph[7][7];
bool isResult = false;

int dx[] = {0, 0, 1, -1};
int dy[] = {1, -1, 0, 0};

void Back(int cnt) {
    if (cnt == 3) {
        bool check = false; // 학생을 발견하면 false에서 true
        for (int i = 0; i < N; i ++) {
            for (int j = 0; j < N; j ++) {
                if (graph[i][j] == 'T' && !check) {
                    for (int z = 0; z < 4; z ++) {
                        int mul = 1;
                        while(1) {
                            int nx = i + dx[z] * mul;
                            int ny = j + dy[z] * mul;

                            // 범위 체크
                            if (nx < 0 || nx > N-1 || ny < 0 || ny > N-1) break;
                            // 장애물 체크
                            if (graph[nx][ny] == 'O') break;

                            if (graph[nx][ny] == 'S') {
                                check = true;
                                break;
                            }
                            mul ++;
                        }
                    }
                }
            }
        }
        // 전부 숨을 수 있는 경우의 수 발견.
        if (check == false) {
            isResult = true;
        }
        return ;
    }

    for (int i = 0; i < N; i ++) {
        for (int j = 0; j < N; j ++) {
            if (graph[i][j] == 'X') {
                graph[i][j] = 'O';
                Back(cnt + 1);
                graph[i][j] = 'X';
            }
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

    cin >> N;

    for (int i = 0; i < N; i ++) {
        for (int j = 0; j < N; j ++) {
            cin >> graph[i][j];
        }
    }

    Back(0);

    if (isResult == true) {
        cout << "YES" << '\n';
    }
    else {
        cout << "NO" << '\n';
    }
}
