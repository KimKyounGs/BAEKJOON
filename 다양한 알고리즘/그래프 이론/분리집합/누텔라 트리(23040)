/*
아이디어 :


*/
#include <iostream>
#include <vector>

using namespace std;

int N;
int result = 0;
vector<int> graph[100001];                
int parent[100001];
int sum[100001];
string color;

int Find_Parent(int A) {
    if (A == parent[A]) {
        return A;
    }
    return parent[A] = Find_Parent(parent[A]);
}

void Union(int A, int B) {
    A = Find_Parent(A);
    B = Find_Parent(B);
    // A가 부모 B가 자식.
    parent[B] = A;
}

void Search(int u) {
    for (int i = 0; i < graph[u].size(); i ++) {
        int nu = graph[u][i];
        if (parent[nu] == 0 && color[nu-1] == 'R') {
            parent[nu] = nu;
            Union(u,nu);
            Search(nu);
        }
    }
}

int main() {
    cin >> N;
    for (int i = 0; i < N-1; i ++) {
        int s, e;
        cin >> s >> e;
        graph[s].push_back(e);
        graph[e].push_back(s);
    }
    cin >> color;

    for (int i = 1; i <= N; i++) {
        if (parent[i] == 0 && color[i-1] == 'R') {
            parent[i] = i;
            Search(i);
        }
    }

    /*
    for (int i = 1; i <= N; i++) {
        cout << parent[i] << ' ';
    }
    */
    
    for (int i = 0; i < N; i ++) {
        if (color[i] == 'R') {
            sum[parent[i+1]] ++; 
        }
    }

    /*
    cout << "\n---sum---" << '\n';
    for (int i = 1; i <= N; i ++) {
        cout << sum[i] << ' ';
    }
    cout << "\n---sum---" << '\n';
    */
    
    for (int i = 0; i < N; i ++) {
        if (color[i] == 'B') {
            for (int j = 0; j < graph[i+1].size(); j ++) {
                if (color[graph[i+1][j]-1] == 'R') {
                    result += sum[parent[graph[i+1][j]]];
                }
            }
        }
    }
    
    cout << result << '\n';

    
    return 0;
}