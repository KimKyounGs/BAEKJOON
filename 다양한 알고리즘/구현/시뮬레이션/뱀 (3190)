/*
#아이디어

graph에 몸이 있으면 snackIdx로 표시
graph에 사과가 있으면 -1로 표시
*/
#include <bits/stdc++.h>

using namespace std;

int N, K, L;
int graph[101][101];

// 방향 바꿀 함수에 사용
vector <pair<int, char>> changeDir;
int dirIdx = 0;

// 뱀의 몸
queue<pair<int, int>> snack;

int times = 0;

char changeDirection(char nowDir, char changeDir) {
    if (nowDir == 'A') {
        if (changeDir == 'L') return 'S';
        else if (changeDir == 'D') return 'W';
    }
    else if (nowDir == 'S') {
        if (changeDir == 'L') return 'D';
        else if (changeDir == 'D') return 'A';
    }
    else if (nowDir == 'D') {
        if (changeDir == 'L') return 'W';
        else if (changeDir == 'D') return 'S';
    }
    if (nowDir == 'W') {
        if (changeDir == 'L') return 'A';
        else if (changeDir == 'D') return 'D';
    }
    return nowDir;
}

bool check; // 게임 종료

void Simulation(int x, int y, char dir) {
    if (check) return;
    times ++;
    bool dirCheck = false;
    if (dirIdx != L) {
        if (times == changeDir[dirIdx].first) {
            dirCheck = true;
        }
    }
    int nx, ny;

    if (dir == 'A') {
        nx = x;
        ny = y-1;
        if (nx < 1 || nx > N || ny < 1 || ny > N || graph[nx][ny] == 1) {
            check = true;
            return;
        }
        // 사과가 있다면 --> 꼬리 가만히 있기.
        if (graph[nx][ny] == -1) {
            snack.push({nx,ny});
            graph[nx][ny] = 1;
        }
        // 사과가 없다면 --> 꼬리 옮기기.
        else {
            graph[snack.front().first][snack.front().second] = 0;
            snack.pop();
            snack.push({nx,ny});
            graph[nx][ny] = 1;
        }
    }
        
    else if (dir == 'S') {
        nx = x+1;
        ny = y;
        if (nx < 1 || nx > N || ny < 1 || ny > N || graph[nx][ny] == 1) {
            check = true;
            return;
        }
        // 사과가 있다면 --> 꼬리 가만히 있기.
        if (graph[nx][ny] == -1) {
            snack.push({nx,ny});
            graph[nx][ny] = 1;
        }
        // 사과가 없다면 --> 꼬리 옮기기.
        else {
            graph[snack.front().first][snack.front().second] = 0;
            snack.pop();
            snack.push({nx,ny});
            graph[nx][ny] = 1;
        }
    }
        
    else if (dir == 'D') {
        nx = x;
        ny = y+1;
        if (nx < 1 || nx > N || ny < 1 || ny > N || graph[nx][ny] == 1) {
            check = true;
            return;
        }
        // 사과가 있다면 --> 꼬리 가만히 있기.
        if (graph[nx][ny] == -1) {
            snack.push({nx,ny});
            graph[nx][ny] = 1;
        }
        // 사과가 없다면 --> 꼬리 옮기기.
        else {
            graph[snack.front().first][snack.front().second] = 0;
            snack.pop();
            snack.push({nx,ny});
            graph[nx][ny] = 1;
        }
    }
        
    else if (dir == 'W') {
        nx = x-1;
        ny = y;
        if (nx < 1 || nx > N || ny < 1 || ny > N || graph[nx][ny] == 1) {
            check = true;
            return;
        }
        // 사과가 있다면 --> 꼬리 가만히 있기.
        if (graph[nx][ny] == -1) {
            snack.push({nx,ny});
            graph[nx][ny] = 1;
        }
        // 사과가 없다면 --> 꼬리 옮기기.
        else {
            graph[snack.front().first][snack.front().second] = 0;
            snack.pop();
            snack.push({nx,ny});
            graph[nx][ny] = 1;
        }
    }

    if (dirCheck) {
        dir = changeDirection(dir, changeDir[dirIdx].second); 
        dirIdx ++;
        dirCheck = false;
    }

    /*
    cout << "times == " << times << " dir == " << dir << "\n";
    for (int i = 1; i <= N; i ++) {
        for (int j = 1; j <= N; j ++) {
            cout << graph[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl;
    */
    
    Simulation(nx, ny, dir);
}

int main() {
    cin >> N;
    cin >> K;
    for (int i = 0; i < K; i ++) {
        int x, y;
        cin >> x >> y;
        graph[x][y] = -1;
    }
    cin >> L;
    for (int i = 0; i < L; i ++) {
        int time;
        char dir;
        cin >> time >> dir;
        changeDir.push_back({time,dir});
    }

    snack.push({1,1});
    graph[1][1] = 1;
    Simulation(1, 1, 'D');
    
    cout << times << '\n';
    
}