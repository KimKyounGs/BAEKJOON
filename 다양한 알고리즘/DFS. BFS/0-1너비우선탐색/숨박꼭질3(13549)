/*
아이디어 :
BFS는 모든 간선의 가중치가 동일할 때 사용한다. 
그것이 아니면 덱큐를 이요한 0-1 BFS도 생각해보자.

참고 : https://jdselectron.tistory.com/58
https://justicehui.github.io/medium-algorithm/2018/08/30/01BFS/
*/

#include <bits/stdc++.h>

using namespace std;

int N, K;
int visited[100001];

int BFS() {
    deque<int> dq;
    dq.push_front(N);
    visited[N] = 1;

    while(!dq.empty()) {
        int x = dq.front();
        dq.pop_front();

        if (x == K) return visited[K] - 1;

        // 순간이동은 덱큐 앞으로 넣기.
        if (x*2 < 100001 && visited[x*2] == 0) {
            dq.push_front(x*2);
            visited[x*2] = visited[x];
        }

        // 걷기이동은 덱큐 뒤로 넣기.
        if (x+1 < 100001 && visited[x+1] == 0) {
            dq.push_back(x+1);
            visited[x+1] = visited[x] + 1;
        }

        if (x-1 >= 0 && visited[x-1] == 0) {
            dq.push_back(x-1);
            visited[x-1] = visited[x] + 1;
        }
    }
}

int main() { 
    cin >> N >> K;
    cout << BFS() << '\n';
}