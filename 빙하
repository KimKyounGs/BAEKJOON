/*
아이디어 : 


*/

#include <iostream>
#include <queue>
#include <algorithm>
#include <cstring>

using namespace std;

int R, C;
int startX = -1, startY = -1;
int endX, endY;
int result = 0;

int graph[1501][1501];
int temp[1501][1501];
bool visited[1501][1501];

int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, 1, -1};

void MeltIceSheetBFS(int x, int y) {
    visited[x][y] = true;
    queue<pair<int, int>> q;
    q.push({x,y});

    while(!q.empty()) {
        int x = q.front().first;
        int y = q.front().second;
        q.pop();

        for (int i = 0; i < 4; i ++) {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if (nx < 0 || nx > R - 1 || ny < 0 || ny > C - 1 || visited[nx][ny]) continue;

            if (graph[nx][ny] == 1) {
                temp[nx][ny] = 0;
                visited[nx][ny] = true;
            }
            else if (graph[nx][ny] == 0) {
                q.push({nx,ny});
                visited[nx][ny] = true;
            }
        }
    }
}

void FindBFS(int x, int y) {
    queue<pair<int, int>> q;
    q.push({x,y});
    temp[x][y] = 3;

    while(!q.empty()) {
        int x = q.front().first;
        int y = q.front().second;
        q.pop();

        for (int i = 0; i < 4; i ++) {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if (nx < 0 || nx > R - 1 || ny < 0 || ny > C - 1 || temp[nx][ny] == 3) continue;

            if (temp[nx][ny] == 0 || temp[nx][ny] == 2) {
                q.push({nx,ny});
                temp[nx][ny] = 3;
            }
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

    cin >> R >> C;
    for (int i = 0; i < R; i ++) {
        for (int j = 0; j < C; j ++) {
            char c;
            cin >> c;
            if (c == '.') {
                graph[i][j] = 0;
                temp[i][j] = 0;
            }
            else if (c == 'X') {
                graph[i][j] = 1;
                temp[i][j] = 1;
            }
            else if (c == 'L') {
                if (startX == -1) {
                    startX = i;
                    startY = j;
                }
                else {
                    endX = i;
                    endY = j;
                }
                graph[i][j] = 2;
                temp[i][j] = 2;
            }
        }
    }


    
    while(1) {
        result ++;
        for (int i = 0; i < R; i ++) {
            for (int j = 0; j < C; j ++) {
                if (graph[i][j] == 0 && !visited[i][j]) {
                    MeltIceSheetBFS(i,j);
                }
            }
        }
    
        FindBFS(startX,startY);
        
        // 만났다면
        if (temp[endX][endY] == 3) {
            cout << result << '\n';
            break;
        }

        // 초기화과정이 시간초가 원인.
        // 만나지 못했다면
        memset(visited, 0, sizeof(visited));
        for (int i = 0; i < R; i ++) {
            for (int j = 0; j < C; j ++) {
                if (temp[i][j] == 3) {
                    temp[i][j] = 0;
                    graph[i][j] = 0;
                }
                else {
                    graph[i][j] = temp[i][j];
                }
            }
        }

        graph[startX][startY] = 2;
        graph[endX][endY] = 2;
        temp[startX][startY] = 2;
        temp[endX][endY] = 2;

    }



        /*
        cout << "temp" << '\n';
        for (int i = 0; i < R; i ++) {
            for (int j = 0; j < C; j ++) {
                cout << temp[i][j] << ' ';
            }
            cout << '\n';
        }
        cout << '\n';
        
        cout << "graph" << '\n';
        for (int i = 0; i < R; i ++) {
            for (int j = 0; j < C; j ++) {
                cout << temp[i][j] << ' ';
            }
            cout << '\n';
        }
        cout << '\n';
        */        
    
    return 0;
}
