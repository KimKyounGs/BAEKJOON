/*
아이디어 :

-1 조건 
1. B가 0에 빠질 때
2. 더 이상 구멍에 못 갈 때


// 몇시간 해도 풀리지 않았다. 그래서 블로그를 참고함.
https://junbastick.tistory.com/37

1. 나는 visited 배열을 따로 설정해서 만들려고 하였지만 굳이 그럴 필요가 없었다. 블로그에서 보이듯이 visit라는 4차원 배열을 만들어서 한번에 관리를 하였다. 
어짜피 visit 배열을 한번 방문했던 곳 즉 한번 했던 행동을 안하기 위해 만들어진 배열이다. 

2. 공 겹쳤을 때 처리이다. 
나는 redQ, blueQ를 따로 만들어서 문제를 풀려하였고 또한 visit 배열 또한 redVisited blueVisited를 만들어서 함께 관리를 하였다. 
이렇게 해서 red, blue visited에서 공이 도착되는 지점을 기록하였지만 "어떤 공이 먼저 도착했는 지"를 아무리 생각해도 구현을 못했다.
하지만 블로그에서는 이동한 거리가 많은 공이 늦게 도착한 공이기 때문에 뒤로 한칸 움직이는 방법을 택하였다.




*/
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <cmath>
#include <cstring>
#include <deque>
#define INF 1e9

using namespace std;

int Red(int idx, int x, int y);
int Blue(int idx, int x, int y);

struct Point {
    int x;
    int y;
};

int N, M;
Point red, blue, target;
char graph[11][11];
int redVisited[11][11];
int blueVisited[11][11];
queue<Point> redQ;
queue<Point> blueQ;

int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, 1, -1};


int Red(int idx, int x, int y) {
    cout << "Red enter" << '\n';
    int mul = 1;
    while(true) 
    {
        int nx = x + dx[idx] * mul;
        int ny = y + dy[idx] * mul;

        // 굴러가다가 B 만나면 B 먼저 하게 함.
        if (graph[nx][ny] == 'B') {
            Blue(idx, nx, ny);
        }

        // 구멍을 만나면 그대로 끝.
        else if (graph[nx][ny] == 'O') {
            redVisited[nx][ny] = redVisited[x][y] + 1;
            return 1;
        }

        // 벽을 만날 때 까지 굴러가기.
        else if (graph[nx][ny] == '#') {
            int ex = nx + dx[idx] * (--mul);
            int ey = ny + dy[idx] * (--mul);
            // 먼저 블루공이 도착할 수도 있음.
            if (blueVisited[ex][ey] != 0) {
                ex = nx + dx[idx] * (--mul);
                ey = ny + dy[idx] * (--mul);
                redVisited[ex][ey] = redVisited[x][y] + 1;
            }
            else if (redVisited[ex][ey] == 0) {
                redQ.push({ex, ey});
                redVisited[ex][ey] = redVisited[x][y] + 1;
            }
            else {
                return 0;
            }
            break;
        }

        mul ++;
    }
    return 2;
}

int Blue(int idx, int x, int y) {
    cout << "Blue enter" << '\n';
    int mul = 1;
    while(true) 
    {
        int nx = x + dx[idx] * mul;
        int ny = y + dy[idx] * mul;

        // 굴러가다가 B 만나면 B 먼저 하게 함.
        if (graph[nx][ny] == 'R') {
            Red(idx, nx, ny);
        }

        // 구멍을 만나면 그대로 끝.
        else if (graph[nx][ny] == 'O') {
            blueVisited[nx][ny] = blueVisited[x][y] + 1;
            return 1;
        }

        // 벽을 만날 때 까지 굴러가기.
        else if (graph[nx][ny] == '#') {
            int ex = nx + dx[idx] * (--mul);
            int ey = ny + dy[idx] * (--mul);
            // 먼저 레드공이 도착할 수도 있음.
            if (redVisited[ex][ey] != 0) {
                ex = nx + dx[idx] * (--mul);
                ey = ny + dy[idx] * (--mul);
                blueVisited[ex][ey] = blueVisited[x][y] + 1;
            } 
            else if (blueVisited[ex][ey] == 0) {
                blueQ.push({ex, ey});
                blueVisited[ex][ey] = blueVisited[x][y] + 1;
            }
            else {
                return 0;
            }
            break;
        }

        mul ++;
    }
    return 2;

}

void BFS() {
    redQ.push(red);
    blueQ.push(blue);
    redVisited[red.x][red.y] = 1;
    blueVisited[blue.x][blue.y] = 1;

    while(true) {
        bool check = false;
        Point redP = redQ.front();
        Point blueP = blueQ.front();

        if (!redQ.empty()) {
            redP = redQ.front();
            redQ.pop();
        }
        if (!blueQ.empty())
        {
            blueP = blueQ.front();
            blueQ.pop();
        }

        int nRed;
        int nBlue;
        for (int i = 0; i < 4; i ++) {
            nRed = Red(i, redP.x, redP.y);
            nBlue = Blue(i, blueP.x, blueP.y);
            if ((nRed == 0 && nBlue == 0) || (nRed == 1 || nBlue == 1)) check = true;
        }

        // Debug
        cout << '\n' << "Red" << '\n';
        for(int i = 0; i < N; i ++) {
            for (int j = 0; j < N; j ++) {
                cout << redVisited[i][j] << ' ';
            }
            cout << '\n';
        }
        cout << "blue" << '\n';
        for(int i = 0; i < N; i ++) {
            for (int j = 0; j < N; j ++) {
                cout << blueVisited[i][j] << ' ';
            }
            cout << '\n';
        }

        if (check == true) break;
    }
}


int main() { 
    cin >> N >> M;    
    for (int i = 0; i < N; i ++) {
        for (int j = 0; j < M; j ++) {
            cin >> graph[i][j];
            if (graph[i][j] == 'B') {
                blue.x = i;
                blue.y = j;
            }
            else if (graph[i][j] == 'R') {
                red.x = i;
                red.y = j;
            }
            else if (graph[i][j] == 'O') {
                target.x = i;
                target.y = j;
            }
        }
    }


    BFS();

    // red만 들어오고 blue는 없어야 한다.
    if (redVisited[target.x][target.y] != 0 && blueVisited[target.x][target.y] == 0) {
        cout << redVisited[target.x][target.y] - 1 << '\n';
    }
    else {
        cout << -1 << '\n';
    }
}