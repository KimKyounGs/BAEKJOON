/*
아이디어 : 정렬 기준 순서에 맞게 vector를 구성함.
나머지는 그대로 구현하는 것이라서 어려운 것은 없고 시간만 걸렸음.
*/
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <cmath>
#include <cstring>
#include <deque>
#include <map>
#define INF 1e9
#define endl '\n'

using namespace std;

int N, M;
int result = 0;
int blockCnt = 1;
int rainbowBlockCnt = 0;
int graph[21][21];
bool visited[21][21];
// vector<pair< pair<총 블록 개수, 무지개 블록 개수>, vector<pair<기준 블록 x좌표, 기준 블록 y좌표>>>>
vector<pair<pair<int, int>, vector<pair<int, int>>>> blockCoords; // 탐색한 블록들의 좌표를 담을 공간
int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, 1, -1};

vector<pair<int, int>> BFS(int x, int y, int id) {
    vector<pair<int, int>> v;
    v.push_back({x,y});
    queue<pair<int, int>> q;
    q.push({x,y});
    visited[x][y] = true;

    while(!q.empty()) {
        int x = q.front().first;
        int y = q.front().second;
        q.pop();
        for (int i = 0; i < 4; i ++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (nx < 0 || ny < 0 || nx > N-1 || ny > N-1 || visited[nx][ny]) continue;
            if (graph[nx][ny] == id || graph[nx][ny] == 0) {
                if (graph[nx][ny] == 0) rainbowBlockCnt ++;
                v.push_back({nx,ny});
                q.push({nx,ny});
                visited[nx][ny] = true;
                blockCnt ++;
            }
        }
    }
    return v;
}

bool FindBlock() {
    for (int k = 1; k <= M; k ++) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j ++) {
                if (!visited[i][j] && graph[i][j] == k) {
                    blockCnt = 1;
                    rainbowBlockCnt = 0; // 무지개 블록 갯수 초기화 
                    vector<pair<int, int>> temp = BFS(i, j, k);
                    if (temp.size() != 1) {
                        blockCoords.push_back({{blockCnt,rainbowBlockCnt}, temp});
                    }
                }
            }
        }
        memset(visited, 0, sizeof(visited)); // 방문처리 배열 초기화
    }
    if (blockCoords.size() == 0) return false;
    else return true;
}

void RemoveBlock() {
    sort(blockCoords.begin(), blockCoords.end(), greater<pair<pair<int, int>, vector<pair<int, int>>>>());
    for(int i = 0; i < blockCoords[0].second.size(); i ++) {
        int x = blockCoords[0].second[i].first;
        int y = blockCoords[0].second[i].second;
        graph[x][y] = -2;
    }
    result += pow(blockCoords[0].second.size(),2);
    blockCoords.clear(); // 블록 좌표 벡터 초기화
}

void ApplyGravity() {
    for (int i = N-2; i >= 0; i --) {
        for (int j = 0; j < N; j ++) {
            if (graph[i][j] >= 0) {
                int temp = i;
                while(1) {
                    temp++;
                    if (temp == N || graph[temp][j] != -2) {
                        break;
                    }
                }
                if (temp-1 != i) { // 밑으로 갈 수 있다면
                    graph[temp-1][j] = graph[i][j];
                    graph[i][j] = -2;
                }
            }
        }
    }
}

void Rotate() {
    int temp[21][21] = {0,};

    for (int x = 0; x < N / 2; x++) {
        for (int y = x; y < N - x - 1; y++) {
            // 현재 셀의 값을 저장합니다
            int temp = graph[x][y];

            // 오른쪽에서 위로
                graph[x][y] = graph[y][N - 1 - x];

            // 아래에서 오른쪽으로
                graph[y][N - 1 - x] = graph[N - 1 - x][N - 1 - y];

            // 왼쪽에서 아래로
                graph[N - 1 - x][N - 1 - y] = graph[N - 1 - y][x];

            // 위에서 왼쪽으로
                graph[N - 1 - y][x] = temp;
        }
    }
}

void DebugPrint() {
    cout << endl;
    for (int i = 0; i < N; i ++) {
        for (int j = 0; j < N; j ++) {
            cout << graph[i][j] << '\t';
        }
        cout << '\n';
    }
    cout << '\n';
}

bool Simulation() {
    bool check = FindBlock();   
    if (check == false) return false;
    RemoveBlock();
    // cout << "RemoveBlock" << endl;
    // DebugPrint();

    ApplyGravity();
    // cout << "ApplyGravity" << endl;
    // DebugPrint();

    Rotate();
    // cout << "Rotate" << endl;
    // DebugPrint();

    ApplyGravity();
    // cout << "ApplyGravity" << endl;
    // DebugPrint();
    return true;
}

int main()
{   
    cin >> N >> M;
    for (int i = 0; i < N; i ++) {
        for (int j = 0; j < N; j ++) {
            cin >> graph[i][j];
        }
    }
    while(true) {
        if (!Simulation()) break;
    }
    cout << result << '\n';
}