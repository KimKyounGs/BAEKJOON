/*
아이디어 :

연구소 1에서 약간만 바꿈.

*/
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <cmath>
#include <cstring>
#include <deque>
#include <map>
#define INF 1e9
#define endl '\n'

using namespace std;

int N, M;
int result = INF;
int graph[51][51];
int visit[51][51];
bool check[11];
vector<pair<int, int>> v;
int dx[] = {0, 0, -1, 1};
int dy[] = {-1, 1, 0, 0};

void BFS(queue<pair<int, int>> q) {
    while(!q.empty()) {
        int x = q.front().first;
        int y = q.front().second;
        q.pop();
        for (int i = 0; i < 4; i ++) {
            int nx = x + dx[i];
            int ny = y + dy[i];    

            if (nx < 0 || nx >= N || ny < 0 || ny >= N || visit[nx][ny]) continue;

            if (graph[nx][ny] == 0 || graph[nx][ny] == 2) {
                q.push({nx,ny});
                graph[nx][ny] = graph[x][y] + 1;
                visit[nx][ny] = true;
            }
        }
    }
}

void DFS(int cnt, int idx) {
    if (cnt == M) {
        int temp[51][51];
        copy(&graph[0][0], &graph[0][0]+51*51, &temp[0][0]);
        queue<pair<int, int>> q;
        for (int i = 0; i < v.size(); i ++) {
            if (check[i]) {
                int x = v[i].first;
                int y = v[i].second;
                q.push({x, y});
                visit[x][y] = true;
                graph[x][y] = 3;
            }
        }

        BFS(q);

        int maxs = 0;
        bool check = false;
        for (int i = 0; i < N; i ++) {
            for (int j = 0; j < N; j ++) {
                if (graph[i][j] >= 3) {
                    maxs = max(maxs, graph[i][j]-3);
                }
                if (graph[i][j] == 0 || graph[i][j] == 2) {
                    check = true;
                }
            }
        } 

        if (!check) result = min(result, maxs);
        copy(&temp[0][0], &temp[0][0]+51*51, &graph[0][0]);
        memset(visit, 0, sizeof(visit));
        return;
    }

    for (int i = idx; i < v.size(); i ++) {
        if (check[i]) continue;
        check[i] = true;
        DFS(cnt + 1, i + 1);
        check[i] = false;
    }
}

int main()
{
    cin >> N >> M;
    for (int i = 0; i < N; i ++) {
        for (int j = 0; j < N; j ++) {
            cin >> graph[i][j];
            if (graph[i][j] == 2) {
                v.push_back({i,j});
            }
        }
    }

    DFS(0,0);

    if (result == INF) cout << -1 << endl;
    else cout << result << endl;
}


