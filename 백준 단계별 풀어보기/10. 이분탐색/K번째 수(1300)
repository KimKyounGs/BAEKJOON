/*
아이디어

참고 : https://kbw1101.tistory.com/29

N = 3
A
1*1 1*2 1*3
2*1 2*2 2*3
3*1 3*2 3*3


---------------------------------------
N = 4
1*1 1*2 1*3 1*4
2*1 2*2 2*3 2*4
3*1 3*2 3*3 3*4
4*1 4*2 4*3 4*4


B[5] = S라 가정하면

"전체 숫자중에 S보다 작은 숫자가 5개보다 작으면 안된다."

S = 10
S보다 작은 값의 개수는 13개이다. 이러면 S값을 작게 해준다.

S = 2
S보다 작은 값의 개수는 3개 이다. 이러면 S값을 크게 해준다.

갯수를 구할 때 사용하는 방법은 
min(S/i, N)이다.
이유는 결국 각 행의 값들은 i*1 i*2 i*3 이런식이기 때문이다. 
예를들어 S가 5이고 i=2 이면 2*3은 5를 넘어가기 때문에 안된다. 그래서 2개까지만 가능하다는 뜻이다.

*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

int N, K;
vector<int> B;

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> N;
    cin >> K;

    int start = 1;
    int end = K;
    int result = 0;
    while(start <= end) {
        int mid = (start + end) / 2;

        int cnt = 0;
        for (int i = 1; i <= N; i ++) {
            cnt += min(mid/i, N);
        }

        if (cnt >= K) {
            result = mid;
            end = mid - 1;
        }
        else {
            start = mid + 1;
        }
    }

    cout << result << '\n';
}



