 /*
 아이디어 :

그래프 초기화를 안해서 고생한 문제이다..
테스트 케이스가 나오면 변수 및 배열 벡테 등 초기화를 하는 것을 잊지말자..
 */

#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <cmath>
#include <cstring>
#include <deque>
#define INF 1e9

using namespace std;


int T;
int n, m, t;
int s, g, h;
vector<pair<int, int>> graph[2002];
int dp[2002];

void Dijkstra(int start) {
    priority_queue<pair<int, int> > pq;
    pq.push({0, start});
    dp[start] = 0;
    while (!pq.empty()) { // 큐가 비어있지 않다면
        // 가장 최단 거리가 짧은 노드에 대한 정보 꺼내기
        int dist = -pq.top().first; // 현재 노드까지의 비용 
        int now = pq.top().second; // 현재 노드
        pq.pop();
        // 현재 노드가 이미 처리된 적이 있는 노드라면 무시
        if (dp[now] < dist) continue;
        // 현재 노드와 연결된 다른 인접한 노드들을 확인
        for (int i = 0; i < graph[now].size(); i++) {
            int cost = dist + graph[now][i].second;
            // 현재 노드를 거쳐서, 다른 노드로 이동하는 거리가 더 짧은 경우
            if (cost < dp[graph[now][i].first]) {
                dp[graph[now][i].first] = cost;
                pq.push(make_pair(-cost, graph[now][i].first));
            }
        }
    }
}

int main() { 
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> T;
    while(T--) {
        cin >> n >> m >> t;
        cin >> s >> g >> h;
        for (int i = 0; i < m; i ++) {
            int a, b, d;
            cin >> a >> b >> d;
            graph[a].push_back({b,d});
            graph[b].push_back({a,d});
        }

        vector<int> v;
        for (int i = 0; i < t; i ++) {
            int x;
            cin >> x;

            fill(dp, dp + 2002, INF);
            Dijkstra(s);

            // 제한 없이 가는 시간. (s -> x)
            int firstTime = dp[x];

            // 특정 구역 지나갈 떄 시간 (s -> g -> h -> x) or (s -> h -> g -> x) 

            int secondTime = dp[g];
            int thirdTime = dp[h];

            fill(dp, dp + 2002, INF);
            Dijkstra(g);

            secondTime += dp[h];

            fill(dp, dp + 2002, INF);
            Dijkstra(h);

            secondTime += dp[x];
            thirdTime += dp[g];

            fill(dp, dp + 2002, INF);
            Dijkstra(g);

            thirdTime += dp[x];

            // cout << "time = " << firstTime << ' ' << secondTime << ' ' << thirdTime << '\n';
            if (firstTime == secondTime || firstTime == thirdTime) {
                v.push_back(x);
            }
        }
        sort(v.begin(), v.end());
        for (int i = 0; i < v.size(); i ++) {
            cout << v[i] << ' ';
        }
        cout << '\n';

        for (int i = 0; i <= n; i ++) {
            graph[i].clear();
        }
    }
}