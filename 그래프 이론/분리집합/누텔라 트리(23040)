/*
아이디어 :
1. 빨간 노드의 개수를 구하기.
2. 빨간 노드끼리 연결되면 합치기
3. 각 노드의 자식 개수 구하기.

*/
#include <iostream>
#include <vector>

using namespace std;

int N;
vector<int> graph[100001];                
int Parent[100001];
vector<int> black;
string color;

int Find_Parent(int A) {
    if (A == Parent[A]) {
        return A;
    }
    return Parent[A] = Find_Parent(Parent[A]);
}

void Union(int A, int B) {
    A = Find_Parent(A);
    B = Find_Parent(B);
    // A가 부모 B가 자식.
    Parent[B] = A;
}

void Search(int x) {
    for (int i = 0; i < graph[x].size(); i++) {
        int nx = graph[x][i];
        
        if (Parent[nx] == 0) continue;

        else {
            Union(nx,x);
        }
    }
}


int main() {
    cin >> N;
    for (int i = 0; i < N; i ++) {
        int s, e;
        cin >> s >> e;
        graph[s].push_back(e);
        graph[e].push_back(s);
    }
    cin >> color;
    int len = color.length();
    int idx = 0;
    for (int i = 0; i < len; i ++) {
        if (color[i] == 'R') {
            Parent[i+1] = i+1;
        }
        else {
            black.push_back(i);
        }
    }

    for (int i = 0; i < N; i ++) {
        if (color[i] == 'R') {
            Search(i+1);
        }
    }
    
    return 0;
}